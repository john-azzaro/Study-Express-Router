process notes for express router study
======================================
    o   What is express router?  When you create routes to the endpoints in your application, often times the routes can 
        clutter up your server.js file.  To keep the server.js file a little bit cleaner, you can modularize the application
        endpoints.
    o   In the example taken from Thinkful's shopping list application, the routers have been seperated from the server.js file
        and put into too different files: shoppingListRouter.js and recipesRouter.js.


PHASE 1: Setup server.js to route requests to the new modules
==============================================================
    
    STEP 1: In server.js, we need to IMPORT the two router files.
    ================================================================
        
            const shoppingListRouter = require('./shoppingListRouter');              <== Import the shoppingListRouter module
            const recipesRouter = require('./recipesRouter');                        <== Import the recipesRouter


    STEP 2: Next (still in server.js), use "app.use" to route requests to the right router.
    ========================================================================================

            app.use('./shopping-list', shoppingListRouter);       <== This says that any request to "shopping-list" will be routed to shoppingListRouter.
            app.use('./recipes', recipesRouter);                  <== This says that any request to "recipes" will be routed to recipesRouter.


    STEP 4: Additionally, you want to import other middleware as well, such as body-parser and jsonParser
    ======================================================================================================

            const bodyParser = require('body-parser');
            const jsonParser = bodyParser.json();



PHASE 2: Setup each new "router" file:
======================================

    STEP 1: In each of the new "routers", you need to load express and then express.Router:

            const express = require('express');
            const router = express.Router();

    STEP 2: Then, setup individual routes to this router with a route of "/" instead of "recipes" or "shopping-list".
        o   For example, a GET request would look like thid:

            router.get('/', (req, res) => {
                res.json(Recipes.get());
            });

        o   Note that for Recipes.get, this pertains to the "recipes" we imported at the top of this file with "const {Recipes} = require('./models');".


    STEP 3: Setup your router instance at the bottom of the file:

            module.exports = router;


    So what's happenig here?  When a client sends a GET request to "recipes", the request passes through the middleware (i.e. morgan and static)
    and then is matched to the /recipes endpoint "app.use('/recipes', recipesRouter)".  This then points to the recipesRouter module.  Now that
    we are inside the recipesRouter module, the request is then matched with the handler inside:

            router.get('/', (req, res) => {
                res.json(Recipes.get());
            });

    THEN, this handler points to models.js module where the recipes are via the module we loaded at the top of the file:

           const {Recipes} = require('./models');











    o   Special note: in this application we are using a "views" folder in server.js:

            app.get('/', (req, res) => {
                res.sendFile(_dirname + '/views/index.html')
            });

    o   

        

